Parameters:
  ImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-0852de09092f3a061
    Description: AMI ID for the EC2 instance

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-00afb40cacc903083
    Description: Subnet ID for the EC2 instances

  VPCId:
    Type: AWS::EC2::VPC::Id
    Default: vpc-0bf87f581effeb522
    Description: VPC ID where the instances will be launched

  DesiredCapacity:
    Type: Number
    Default: 2
    Description: Number of instances to launch in the Auto Scaling Group

Resources:
  TrainingNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess

  TrainingNodePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: TrainingNodePolicy
      Roles:
        - !Ref TrainingNodeRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: "arn:aws:s3:::your-bucket-name/*"
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:PutParameter
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/distributed-training/*"

  TrainingNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref TrainingNodeRole

  TrainingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and DDP communication
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: x.x.x.x/32  # Replace with your IP range
        - IpProtocol: tcp
          FromPort: 29500
          ToPort: 29500
          CidrIp: 0.0.0.0/0  # Replace with a more restrictive range if possible
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  TrainingNodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: TrainingNodeLaunchTemplate
      LaunchTemplateData:
        InstanceType: g4dn.xlarge
        ImageId: !Ref ImageId
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref TrainingSecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt TrainingNodeInstanceProfile.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -euxo pipefail
            LOG_FILE="/home/ubuntu/init.log"
            exec > >(tee -a $LOG_FILE | logger -t user-data -s 2>/dev/console) 2>&1

            # Update and upgrade system packages
            apt-get update && apt-get upgrade -y

            # Install pip and virtualenv
            apt-get install -y python3-pip
            python3 -m pip install --upgrade pip setuptools
            python3 -m pip install --user virtualenv

            # Run the rest of the script as ubuntu user
            sudo -i -u ubuntu bash << EOF
            set -euxo pipefail
            cd /home/ubuntu

            # Create and activate a virtual environment
            python3 -m virtualenv ddp_env
            source ddp_env/bin/activate

            # Install Poetry
            curl -sSL https://install.python-poetry.org | python3 -
            export PATH="/home/ubuntu/.local/bin:\$PATH"
            echo 'export PATH="/home/ubuntu/.local/bin:\$PATH"' >> /home/ubuntu/.bashrc

            # Clone your repository
            git clone https://github.com/ghudeihed/DDPTraining.git
            cd DDPTraining

            # Install dependencies using Poetry
            poetry config virtualenvs.create false  # Use the existing virtual environment
            poetry install

            # Verify PyTorch installation
            python -c "import torch; print(f'PyTorch version: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}'); print(f'CUDA version: {torch.version.cuda}')"

            # Distributed training configuration
            export WORLD_SIZE=${DesiredCapacity}
            export RANK=\$(curl -s http://169.254.169.254/latest/meta-data/ami-launch-index)
            export PRIVATE_IP=\$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
            export MASTER_PORT=29500

            if [ "\$RANK" -eq "0" ]; then
              # Master node writes its IP to SSM Parameter Store
              aws ssm put-parameter --name "/distributed-training/master-ip" --type "String" --value "\$PRIVATE_IP" --overwrite --region ${AWS::Region}
              export MASTER_ADDR="\$PRIVATE_IP"
            else
              # Wait for the master IP to be available
              until [ -n "\$MASTER_ADDR" ]; do
                MASTER_ADDR=\$(aws ssm get-parameter --name "/distributed-training/master-ip" --query "Parameter.Value" --output text --region ${AWS::Region} || echo "")
                sleep 5
              done
              export MASTER_ADDR
            fi

            # Run your training script
            nohup poetry run python train.py > /home/ubuntu/train.log 2>&1 &
            EOF

  TrainingNodeAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: TrainingNodeASG
      VPCZoneIdentifier:
        - !Ref SubnetId
      LaunchTemplate:
        LaunchTemplateId: !Ref TrainingNodeLaunchTemplate
        Version: !GetAtt TrainingNodeLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '10'
      DesiredCapacity: !Ref DesiredCapacity
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: TrainingNode
          PropagateAtLaunch: true
        - Key: Project
          Value: DDPTraining
          PropagateAtLaunch: true
